"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var contacts_service_1 = require("./contacts.service");
var app_component_1 = require("../app.component");
var dialogs = require("ui/dialogs");
var firebase = require("nativescript-plugin-firebase");
var appSettings = require("application-settings");
var ContactsComponent = (function () {
    function ContactsComponent(app, cService) {
        this.app = app;
        this.cService = cService;
        this.contacts = [];
        this.fields = {
            first_name: 'First Name',
            last_name: 'Last Name',
            phone: 'Phone'
        };
        this.types = {
            asc: 'Ascending',
            desc: 'Descending',
        };
        this.sorting = {
            first_name: {
                asc: function (x, y) {
                    var a = x['first_name'].toLowerCase(), b = y['first_name'].toLowerCase();
                    if (a < b)
                        return -1;
                    if (a > b)
                        return 1;
                    return 0;
                },
                desc: function (x, y) {
                    var a = x['first_name'].toLowerCase(), b = y['first_name'].toLowerCase();
                    if (b < a)
                        return -1;
                    if (b > a)
                        return 1;
                    return 0;
                }
            },
            last_name: {
                asc: function (x, y) {
                    var a = x['last_name'].toLowerCase(), b = y['last_name'].toLowerCase();
                    if (a < b)
                        return -1;
                    if (a > b)
                        return 1;
                    return 0;
                },
                desc: function (x, y) {
                    var a = x['last_name'].toLowerCase(), b = y['last_name'].toLowerCase();
                    if (b < a)
                        return -1;
                    if (b > a)
                        return 1;
                    return 0;
                }
            },
            phone: {
                asc: function (x, y) {
                    var a = x['phone'].toLowerCase(), b = y['phone'].toLowerCase();
                    if (a < b)
                        return -1;
                    if (a > b)
                        return 1;
                    return 0;
                },
                desc: function (x, y) {
                    var a = x['phone'].toLowerCase(), b = y['phone'].toLowerCase();
                    if (b < a)
                        return -1;
                    if (b > a)
                        return 1;
                    return 0;
                }
            },
        };
        this.service = cService;
        this.orderBy = {
            field: 'first_name',
            type: 'asc'
        };
        this.contacts = this.service.getContacts(this.orderBy.field, this.orderBy.type);
    }
    ContactsComponent.prototype.ngOnInit = function () {
        this.reOrder();
    };
    ContactsComponent.prototype.reOrder = function () {
        this.contacts.sort(this.sorting[this.orderBy.field][this.orderBy.type]);
    };
    ContactsComponent.prototype.selectOrderField = function () {
        var _this = this;
        var component = this;
        dialogs.action({
            message: "Select Field to Order the Contacts",
            cancelButtonText: 'Cancel',
            actions: ['First Name', 'Last Name', 'Phone']
        })
            .then(function (result) {
            switch (result) {
                case 'First Name':
                    component.orderBy.field = 'first_name';
                    break;
                case 'Last Name':
                    component.orderBy.field = 'last_name';
                    break;
                case 'Phone':
                    component.orderBy.field = 'phone';
                    break;
            }
            _this.reOrder();
        });
    };
    ContactsComponent.prototype.selectOrderTypeField = function () {
        var _this = this;
        var component = this;
        dialogs.action({
            message: "Select Sorting Type",
            cancelButtonText: 'Cancel',
            actions: ['Ascending', 'Descending']
        })
            .then(function (result) {
            switch (result) {
                case 'Ascending':
                    component.orderBy.type = 'asc';
                    break;
                case 'Descending':
                    component.orderBy.type = 'desc';
                    break;
            }
            _this.reOrder();
        });
    };
    ContactsComponent = __decorate([
        core_1.Component({
            selector: 'my-app',
            templateUrl: './pages/contacts/list.html',
            providers: [contacts_service_1.ContactsService]
        }),
        __metadata("design:paramtypes", [app_component_1.AppComponent, contacts_service_1.ContactsService])
    ], ContactsComponent);
    return ContactsComponent;
}());
exports.ContactsComponent = ContactsComponent;
//# sourceMappingURL=data:application/json;base64,