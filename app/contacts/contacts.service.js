"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var ContactsService = (function () {
    function ContactsService() {
        this.collection = 'contacts';
        this.contacts = [];
        this.contact = {};
    }
    ContactsService.prototype.getContacts = function (field, order) {
        var _this = this;
        var contactsCollector = function (result) {
            if (!result.error) {
                for (var id in result.value) {
                    var contact = Object.assign({ id: id }, result.value[id]);
                    _this.contacts.push(contact);
                }
            }
            if (result.error) {
                console.log("Error in Firebase : " + result.error);
            }
        };
        firebase.query(function () {
        }, "/" + this.collection, {
            singleEvent: true,
            orderBy: {
                type: firebase.QueryOrderByType.CHILD,
                value: field
            }
        })
            .then(function (results) {
            contactsCollector(results);
        });
        return this.contacts;
    };
    ContactsService.prototype.getContact = function (id) {
        var _this = this;
        console.log("Receiving Information about ID of '" + id + "'");
        var contactPopulator = function (contacts) {
            if (!contacts.error) {
                _this.contact = Object.assign({ id: contacts.key }, contacts.value);
            }
        };
        firebase.query(contactPopulator, "/" + this.collection + "/" + id, {
            singleEvent: true,
            orderBy: {
                type: firebase.QueryOrderByType.VALUE,
                value: 'first_name'
            }
        }).then(function (results) {
            if (!results.error) {
                _this.contact = Object.assign({ id: results.key }, results.value);
            }
            return _this.contact;
        });
        return this.contact;
    };
    ContactsService.prototype.createContact = function (contact) {
    };
    ContactsService.prototype.updateContact = function (id, contact) {
    };
    ContactsService.prototype.deleteContact = function (id) {
    };
    ContactsService = __decorate([
        core_1.Injectable()
    ], ContactsService);
    return ContactsService;
}());
exports.ContactsService = ContactsService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFjdHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbnRhY3RzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBd0M7QUFDeEMsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFHekQ7SUFEQTtRQUdZLGVBQVUsR0FBRyxVQUFVLENBQUM7UUFDeEIsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNkLFlBQU8sR0FBRyxFQUFFLENBQUM7SUE0RXpCLENBQUM7SUExRUcscUNBQVcsR0FBWCxVQUFZLEtBQWEsRUFBRSxLQUFhO1FBQXhDLGlCQStCQztRQTlCRyxJQUFJLGlCQUFpQixHQUFHLFVBQUMsTUFBTTtZQUMzQixFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDMUIsSUFBSSxPQUFPLEdBQVMsTUFBTyxDQUFDLE1BQU0sQ0FBQyxFQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUMsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQy9ELEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNoQyxDQUFDO1lBQ0wsQ0FBQztZQUVELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZELENBQUM7UUFDTCxDQUFDLENBQUM7UUFFRixRQUFRLENBQUMsS0FBSyxDQUNWO1FBQ0EsQ0FBQyxFQUNELE1BQUksSUFBSSxDQUFDLFVBQVksRUFDckI7WUFDSSxXQUFXLEVBQUUsSUFBSTtZQUNqQixPQUFPLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLO2dCQUNyQyxLQUFLLEVBQUUsS0FBSzthQUNmO1NBQ0osQ0FDSjthQUNJLElBQUksQ0FBQyxVQUFDLE9BQU87WUFDVixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVQLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxvQ0FBVSxHQUFWLFVBQVcsRUFBVTtRQUFyQixpQkE0QkM7UUEzQkcsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBc0MsRUFBRSxNQUFHLENBQUMsQ0FBQztRQUV6RCxJQUFJLGdCQUFnQixHQUFHLFVBQUMsUUFBUTtZQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNsQixLQUFJLENBQUMsT0FBTyxHQUFTLE1BQU8sQ0FBQyxNQUFNLENBQUMsRUFBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLEdBQUcsRUFBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1RSxDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBRUYsUUFBUSxDQUFDLEtBQUssQ0FDVixnQkFBZ0IsRUFDaEIsTUFBSSxJQUFJLENBQUMsVUFBVSxTQUFJLEVBQUksRUFDM0I7WUFDSSxXQUFXLEVBQUUsSUFBSTtZQUNqQixPQUFPLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLO2dCQUNyQyxLQUFLLEVBQUUsWUFBWTthQUN0QjtTQUNKLENBQ0osQ0FBQyxJQUFJLENBQUMsVUFBQSxPQUFPO1lBQ1YsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDakIsS0FBSSxDQUFDLE9BQU8sR0FBUyxNQUFPLENBQUMsTUFBTSxDQUFDLEVBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUMsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUUsQ0FBQztZQUVELE1BQU0sQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELHVDQUFhLEdBQWIsVUFBYyxPQUFlO0lBQzdCLENBQUM7SUFFRCx1Q0FBYSxHQUFiLFVBQWMsRUFBVSxFQUFFLE9BQWU7SUFFekMsQ0FBQztJQUVELHVDQUFhLEdBQWIsVUFBYyxFQUFVO0lBRXhCLENBQUM7SUE5RVEsZUFBZTtRQUQzQixpQkFBVSxFQUFFO09BQ0EsZUFBZSxDQWdGM0I7SUFBRCxzQkFBQztDQUFBLEFBaEZELElBZ0ZDO0FBaEZZLDBDQUFlIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHtJbmplY3RhYmxlfSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiXG5jb25zdCBmaXJlYmFzZSA9IHJlcXVpcmUoXCJuYXRpdmVzY3JpcHQtcGx1Z2luLWZpcmViYXNlXCIpO1xuXG5ASW5qZWN0YWJsZSgpXG5leHBvcnQgY2xhc3MgQ29udGFjdHNTZXJ2aWNlIHtcblxuICAgIHByaXZhdGUgY29sbGVjdGlvbiA9ICdjb250YWN0cyc7XG4gICAgcHJpdmF0ZSBjb250YWN0cyA9IFtdO1xuICAgIHByaXZhdGUgY29udGFjdCA9IHt9O1xuXG4gICAgZ2V0Q29udGFjdHMoZmllbGQ6IFN0cmluZywgb3JkZXI6IFN0cmluZykge1xuICAgICAgICBsZXQgY29udGFjdHNDb2xsZWN0b3IgPSAocmVzdWx0KSA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdC5lcnJvcikge1xuICAgICAgICAgICAgICAgIGZvciAobGV0IGlkIGluIHJlc3VsdC52YWx1ZSkge1xuICAgICAgICAgICAgICAgICAgICBsZXQgY29udGFjdCA9ICg8YW55Pk9iamVjdCkuYXNzaWduKHtpZDogaWR9LCByZXN1bHQudmFsdWVbaWRdKTtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy5jb250YWN0cy5wdXNoKGNvbnRhY3QpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgaWYgKHJlc3VsdC5lcnJvcikge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKFwiRXJyb3IgaW4gRmlyZWJhc2UgOiBcIiArIHJlc3VsdC5lcnJvcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZmlyZWJhc2UucXVlcnkoXG4gICAgICAgICAgICAoKSA9PiB7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYC8ke3RoaXMuY29sbGVjdGlvbn1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmdsZUV2ZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIG9yZGVyQnk6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZmlyZWJhc2UuUXVlcnlPcmRlckJ5VHlwZS5DSElMRCxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6IGZpZWxkXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApXG4gICAgICAgICAgICAudGhlbigocmVzdWx0cykgPT4ge1xuICAgICAgICAgICAgICAgIGNvbnRhY3RzQ29sbGVjdG9yKHJlc3VsdHMpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGFjdHM7XG4gICAgfVxuXG4gICAgZ2V0Q29udGFjdChpZDogU3RyaW5nKSB7XG4gICAgICAgIGNvbnNvbGUubG9nKGBSZWNlaXZpbmcgSW5mb3JtYXRpb24gYWJvdXQgSUQgb2YgJyR7aWR9J2ApO1xuXG4gICAgICAgIGxldCBjb250YWN0UG9wdWxhdG9yID0gKGNvbnRhY3RzKSA9PiB7XG4gICAgICAgICAgICBpZiAoIWNvbnRhY3RzLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWN0ID0gKDxhbnk+T2JqZWN0KS5hc3NpZ24oe2lkOiBjb250YWN0cy5rZXl9LCBjb250YWN0cy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZmlyZWJhc2UucXVlcnkoXG4gICAgICAgICAgICBjb250YWN0UG9wdWxhdG9yLFxuICAgICAgICAgICAgYC8ke3RoaXMuY29sbGVjdGlvbn0vJHtpZH1gLFxuICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgIHNpbmdsZUV2ZW50OiB0cnVlLFxuICAgICAgICAgICAgICAgIG9yZGVyQnk6IHtcbiAgICAgICAgICAgICAgICAgICAgdHlwZTogZmlyZWJhc2UuUXVlcnlPcmRlckJ5VHlwZS5WQUxVRSxcbiAgICAgICAgICAgICAgICAgICAgdmFsdWU6ICdmaXJzdF9uYW1lJ1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKS50aGVuKHJlc3VsdHMgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXN1bHRzLmVycm9yKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb250YWN0ID0gKDxhbnk+T2JqZWN0KS5hc3NpZ24oe2lkOiByZXN1bHRzLmtleX0sIHJlc3VsdHMudmFsdWUpO1xuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5jb250YWN0O1xuICAgICAgICB9KTtcblxuICAgICAgICByZXR1cm4gdGhpcy5jb250YWN0O1xuICAgIH1cblxuICAgIGNyZWF0ZUNvbnRhY3QoY29udGFjdDogT2JqZWN0KSB7XG4gICAgfVxuXG4gICAgdXBkYXRlQ29udGFjdChpZDogU3RyaW5nLCBjb250YWN0OiBPYmplY3QpIHtcblxuICAgIH1cblxuICAgIGRlbGV0ZUNvbnRhY3QoaWQ6IFN0cmluZykge1xuXG4gICAgfVxuXG59Il19