"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var firebase = require("nativescript-plugin-firebase");
var ContactsService = (function () {
    function ContactsService() {
        this.collection = 'contacts';
        this.contacts = [];
        this.contact = {};
    }
    ContactsService.prototype.getContacts = function (field, order) {
        var _this = this;
        var contactsCollector = function (result) {
            if (!result.error) {
                for (var id in result.value) {
                    var contact = Object.assign({ id: id }, result.value[id]);
                    _this.contacts.push(contact);
                }
            }
            if (result.error) {
                console.log("Error in Firebase : " + result.error);
            }
        };
        firebase.query(function () {
        }, "/" + this.collection, {
            singleEvent: true,
            orderBy: {
                type: firebase.QueryOrderByType.CHILD,
                value: field
            }
        })
            .then(function (results) {
            contactsCollector(results);
        });
        return this.contacts;
    };
    ContactsService.prototype.getContact = function (id) {
        var _this = this;
        console.log("Receiving Information about ID of '" + id + "'");
        var contactPopulator = function (contacts) {
            if (!contacts.error) {
                _this.contact = Object.assign({ id: contacts.key }, contacts.value);
            }
        };
        firebase.query(contactPopulator, "/" + this.collection + "/" + id, {
            singleEvent: true,
            orderBy: {
                type: firebase.QueryOrderByType.VALUE,
                value: 'first_name'
            }
        }).then(function (results) {
            if (!results.error) {
                _this.contact = Object.assign({ id: results.key }, results.value);
            }
            return _this.contact;
        });
        return this.contact;
    };
    ContactsService.prototype.createContact = function (contact) {
        firebase.push("/" + this.collection, contact);
    };
    ContactsService.prototype.updateContact = function (id, contact) {
        firebase.update("/" + this.collection + "/" + id, contact);
    };
    ContactsService.prototype.deleteContact = function (id) {
        firebase.remove("/" + this.collection + "/" + id);
    };
    ContactsService = __decorate([
        core_1.Injectable()
    ], ContactsService);
    return ContactsService;
}());
exports.ContactsService = ContactsService;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFjdHMuc2VydmljZS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbnRhY3RzLnNlcnZpY2UudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBd0M7QUFDeEMsSUFBTSxRQUFRLEdBQUcsT0FBTyxDQUFDLDhCQUE4QixDQUFDLENBQUM7QUFHekQ7SUFEQTtRQUdZLGVBQVUsR0FBRyxVQUFVLENBQUM7UUFDeEIsYUFBUSxHQUFHLEVBQUUsQ0FBQztRQUNkLFlBQU8sR0FBRyxFQUFFLENBQUM7SUE2RXpCLENBQUM7SUEzRUcscUNBQVcsR0FBWCxVQUFZLEtBQWEsRUFBRSxLQUFhO1FBQXhDLGlCQStCQztRQTlCRyxJQUFJLGlCQUFpQixHQUFHLFVBQUMsTUFBTTtZQUMzQixFQUFFLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNoQixHQUFHLENBQUMsQ0FBQyxJQUFJLEVBQUUsSUFBSSxNQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztvQkFDMUIsSUFBSSxPQUFPLEdBQVMsTUFBTyxDQUFDLE1BQU0sQ0FBQyxFQUFDLEVBQUUsRUFBRSxFQUFFLEVBQUMsRUFBRSxNQUFNLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUM7b0JBQy9ELEtBQUksQ0FBQyxRQUFRLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO2dCQUNoQyxDQUFDO1lBQ0wsQ0FBQztZQUVELEVBQUUsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNmLE9BQU8sQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEdBQUcsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO1lBQ3ZELENBQUM7UUFDTCxDQUFDLENBQUM7UUFFRixRQUFRLENBQUMsS0FBSyxDQUNWO1FBQ0EsQ0FBQyxFQUNELE1BQUksSUFBSSxDQUFDLFVBQVksRUFDckI7WUFDSSxXQUFXLEVBQUUsSUFBSTtZQUNqQixPQUFPLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLO2dCQUNyQyxLQUFLLEVBQUUsS0FBSzthQUNmO1NBQ0osQ0FDSjthQUNJLElBQUksQ0FBQyxVQUFDLE9BQU87WUFDVixpQkFBaUIsQ0FBQyxPQUFPLENBQUMsQ0FBQztRQUMvQixDQUFDLENBQUMsQ0FBQztRQUVQLE1BQU0sQ0FBQyxJQUFJLENBQUMsUUFBUSxDQUFDO0lBQ3pCLENBQUM7SUFFRCxvQ0FBVSxHQUFWLFVBQVcsRUFBVTtRQUFyQixpQkE0QkM7UUEzQkcsT0FBTyxDQUFDLEdBQUcsQ0FBQyx3Q0FBc0MsRUFBRSxNQUFHLENBQUMsQ0FBQztRQUV6RCxJQUFJLGdCQUFnQixHQUFHLFVBQUMsUUFBUTtZQUM1QixFQUFFLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNsQixLQUFJLENBQUMsT0FBTyxHQUFTLE1BQU8sQ0FBQyxNQUFNLENBQUMsRUFBQyxFQUFFLEVBQUUsUUFBUSxDQUFDLEdBQUcsRUFBQyxFQUFFLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUM1RSxDQUFDO1FBQ0wsQ0FBQyxDQUFDO1FBRUYsUUFBUSxDQUFDLEtBQUssQ0FDVixnQkFBZ0IsRUFDaEIsTUFBSSxJQUFJLENBQUMsVUFBVSxTQUFJLEVBQUksRUFDM0I7WUFDSSxXQUFXLEVBQUUsSUFBSTtZQUNqQixPQUFPLEVBQUU7Z0JBQ0wsSUFBSSxFQUFFLFFBQVEsQ0FBQyxnQkFBZ0IsQ0FBQyxLQUFLO2dCQUNyQyxLQUFLLEVBQUUsWUFBWTthQUN0QjtTQUNKLENBQ0osQ0FBQyxJQUFJLENBQUMsVUFBQSxPQUFPO1lBQ1YsRUFBRSxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQztnQkFDakIsS0FBSSxDQUFDLE9BQU8sR0FBUyxNQUFPLENBQUMsTUFBTSxDQUFDLEVBQUMsRUFBRSxFQUFFLE9BQU8sQ0FBQyxHQUFHLEVBQUMsRUFBRSxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUM7WUFDMUUsQ0FBQztZQUVELE1BQU0sQ0FBQyxLQUFJLENBQUMsT0FBTyxDQUFDO1FBQ3hCLENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUM7SUFDeEIsQ0FBQztJQUVELHVDQUFhLEdBQWIsVUFBYyxPQUFlO1FBQ3pCLFFBQVEsQ0FBQyxJQUFJLENBQUMsTUFBSSxJQUFJLENBQUMsVUFBWSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQ2xELENBQUM7SUFFRCx1Q0FBYSxHQUFiLFVBQWMsRUFBVSxFQUFFLE9BQWU7UUFDckMsUUFBUSxDQUFDLE1BQU0sQ0FBQyxNQUFJLElBQUksQ0FBQyxVQUFVLFNBQUksRUFBSSxFQUFFLE9BQU8sQ0FBQyxDQUFDO0lBQzFELENBQUM7SUFFRCx1Q0FBYSxHQUFiLFVBQWMsRUFBVTtRQUNwQixRQUFRLENBQUMsTUFBTSxDQUFDLE1BQUksSUFBSSxDQUFDLFVBQVUsU0FBSSxFQUFJLENBQUMsQ0FBQztJQUNqRCxDQUFDO0lBL0VRLGVBQWU7UUFEM0IsaUJBQVUsRUFBRTtPQUNBLGVBQWUsQ0FpRjNCO0lBQUQsc0JBQUM7Q0FBQSxBQWpGRCxJQWlGQztBQWpGWSwwQ0FBZSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7SW5qZWN0YWJsZX0gZnJvbSBcIkBhbmd1bGFyL2NvcmVcIlxuY29uc3QgZmlyZWJhc2UgPSByZXF1aXJlKFwibmF0aXZlc2NyaXB0LXBsdWdpbi1maXJlYmFzZVwiKTtcblxuQEluamVjdGFibGUoKVxuZXhwb3J0IGNsYXNzIENvbnRhY3RzU2VydmljZSB7XG5cbiAgICBwcml2YXRlIGNvbGxlY3Rpb24gPSAnY29udGFjdHMnO1xuICAgIHByaXZhdGUgY29udGFjdHMgPSBbXTtcbiAgICBwcml2YXRlIGNvbnRhY3QgPSB7fTtcblxuICAgIGdldENvbnRhY3RzKGZpZWxkOiBTdHJpbmcsIG9yZGVyOiBTdHJpbmcpIHtcbiAgICAgICAgbGV0IGNvbnRhY3RzQ29sbGVjdG9yID0gKHJlc3VsdCkgPT4ge1xuICAgICAgICAgICAgaWYgKCFyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBmb3IgKGxldCBpZCBpbiByZXN1bHQudmFsdWUpIHtcbiAgICAgICAgICAgICAgICAgICAgbGV0IGNvbnRhY3QgPSAoPGFueT5PYmplY3QpLmFzc2lnbih7aWQ6IGlkfSwgcmVzdWx0LnZhbHVlW2lkXSk7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuY29udGFjdHMucHVzaChjb250YWN0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgICAgIGlmIChyZXN1bHQuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZyhcIkVycm9yIGluIEZpcmViYXNlIDogXCIgKyByZXN1bHQuZXJyb3IpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZpcmViYXNlLnF1ZXJ5KFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGAvJHt0aGlzLmNvbGxlY3Rpb259YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5nbGVFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvcmRlckJ5OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGZpcmViYXNlLlF1ZXJ5T3JkZXJCeVR5cGUuQ0hJTEQsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiBmaWVsZFxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgKVxuICAgICAgICAgICAgLnRoZW4oKHJlc3VsdHMpID0+IHtcbiAgICAgICAgICAgICAgICBjb250YWN0c0NvbGxlY3RvcihyZXN1bHRzKTtcbiAgICAgICAgICAgIH0pO1xuXG4gICAgICAgIHJldHVybiB0aGlzLmNvbnRhY3RzO1xuICAgIH1cblxuICAgIGdldENvbnRhY3QoaWQ6IFN0cmluZykge1xuICAgICAgICBjb25zb2xlLmxvZyhgUmVjZWl2aW5nIEluZm9ybWF0aW9uIGFib3V0IElEIG9mICcke2lkfSdgKTtcblxuICAgICAgICBsZXQgY29udGFjdFBvcHVsYXRvciA9IChjb250YWN0cykgPT4ge1xuICAgICAgICAgICAgaWYgKCFjb250YWN0cy5lcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFjdCA9ICg8YW55Pk9iamVjdCkuYXNzaWduKHtpZDogY29udGFjdHMua2V5fSwgY29udGFjdHMudmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuXG4gICAgICAgIGZpcmViYXNlLnF1ZXJ5KFxuICAgICAgICAgICAgY29udGFjdFBvcHVsYXRvcixcbiAgICAgICAgICAgIGAvJHt0aGlzLmNvbGxlY3Rpb259LyR7aWR9YCxcbiAgICAgICAgICAgIHtcbiAgICAgICAgICAgICAgICBzaW5nbGVFdmVudDogdHJ1ZSxcbiAgICAgICAgICAgICAgICBvcmRlckJ5OiB7XG4gICAgICAgICAgICAgICAgICAgIHR5cGU6IGZpcmViYXNlLlF1ZXJ5T3JkZXJCeVR5cGUuVkFMVUUsXG4gICAgICAgICAgICAgICAgICAgIHZhbHVlOiAnZmlyc3RfbmFtZSdcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICkudGhlbihyZXN1bHRzID0+IHtcbiAgICAgICAgICAgIGlmICghcmVzdWx0cy5lcnJvcikge1xuICAgICAgICAgICAgICAgIHRoaXMuY29udGFjdCA9ICg8YW55Pk9iamVjdCkuYXNzaWduKHtpZDogcmVzdWx0cy5rZXl9LCByZXN1bHRzLnZhbHVlKTtcbiAgICAgICAgICAgIH1cblxuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29udGFjdDtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgcmV0dXJuIHRoaXMuY29udGFjdDtcbiAgICB9XG5cbiAgICBjcmVhdGVDb250YWN0KGNvbnRhY3Q6IE9iamVjdCkge1xuICAgICAgICBmaXJlYmFzZS5wdXNoKGAvJHt0aGlzLmNvbGxlY3Rpb259YCwgY29udGFjdCk7XG4gICAgfVxuXG4gICAgdXBkYXRlQ29udGFjdChpZDogU3RyaW5nLCBjb250YWN0OiBPYmplY3QpIHtcbiAgICAgICAgZmlyZWJhc2UudXBkYXRlKGAvJHt0aGlzLmNvbGxlY3Rpb259LyR7aWR9YCwgY29udGFjdCk7XG4gICAgfVxuXG4gICAgZGVsZXRlQ29udGFjdChpZDogU3RyaW5nKSB7XG4gICAgICAgIGZpcmViYXNlLnJlbW92ZShgLyR7dGhpcy5jb2xsZWN0aW9ufS8ke2lkfWApO1xuICAgIH1cblxufSJdfQ==