"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var core_1 = require("@angular/core");
var app_component_1 = require("../app.component");
var router_1 = require("@angular/router");
var firebase = require("nativescript-plugin-firebase");
var dialogs = require("ui/dialogs");
var contacts_service_1 = require("./contacts.service");
var nativescript_snackbar_1 = require("nativescript-snackbar");
var EditContactComponent = (function () {
    function EditContactComponent(app, route, cService, ngRouter) {
        this.app = app;
        this.service = cService;
        this.router = ngRouter;
        this.id = route.snapshot.params.id;
        this.contact = {
            first_name: '',
            last_name: '',
            phone: ''
        };
        this.getContact();
    }
    EditContactComponent.prototype.getContact = function () {
        var _this = this;
        firebase.query(function () {
        }, "/contacts/" + this.id, {
            singleEvent: true,
            orderBy: {
                type: firebase.QueryOrderByType.VALUE,
                value: 'first_name'
            }
        }).then(function (results) {
            if (!results.error) {
                _this.contact = Object.assign({ id: results.key }, results.value);
            }
        });
    };
    EditContactComponent.prototype.update = function () {
        var errors = [], regexp = /^[\s()+-]*([0-9][\s()+-]*){6,20}$/;
        if (this.contact.first_name.replace(/ /gi, "").length == 0) {
            errors.push("First Name is required");
        }
        if (this.contact.last_name.replace(/ /gi, "").length == 0) {
            errors.push("Last Name is required");
        }
        if (this.contact.phone.replace(/ /gi, "").length == 0) {
            errors.push("Phone is required");
        }
        if (!regexp.test(this.contact.phone)) {
            errors.push('Phone format is not valid');
        }
        if (errors.length > 0) {
            return dialogs.alert({
                title: 'Validation Error',
                message: 'Failed to update contact due to next errors:\r\n\r\n' + errors.join('\r\n')
            });
        }
        this.service.updateContact(this.id, this.contact);
        (new nativescript_snackbar_1.SnackBar).simple("Contact has been updated");
        return this.router.navigate(['']);
    };
    EditContactComponent = __decorate([
        core_1.Component({
            selector: 'my-app',
            templateUrl: './pages/contacts/edit.html'
        }),
        __metadata("design:paramtypes", [app_component_1.AppComponent, router_1.ActivatedRoute, contacts_service_1.ContactsService, router_1.Router])
    ], EditContactComponent);
    return EditContactComponent;
}());
exports.EditContactComponent = EditContactComponent;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY29udGFjdC5lZGl0LmNvbXBvbmVudC5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbImNvbnRhY3QuZWRpdC5jb21wb25lbnQudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxzQ0FBd0M7QUFDeEMsa0RBQThDO0FBQzlDLDBDQUF1RDtBQUN2RCxJQUFNLFFBQVEsR0FBRyxPQUFPLENBQUMsOEJBQThCLENBQUMsQ0FBQztBQUN6RCxvQ0FBcUM7QUFDckMsdURBQW1EO0FBQ25ELCtEQUErQztBQU8vQztJQU9JLDhCQUFvQixHQUFpQixFQUFFLEtBQXFCLEVBQUUsUUFBeUIsRUFBRSxRQUFnQjtRQUFyRixRQUFHLEdBQUgsR0FBRyxDQUFjO1FBQ2pDLElBQUksQ0FBQyxPQUFPLEdBQUcsUUFBUSxDQUFDO1FBQ3hCLElBQUksQ0FBQyxNQUFNLEdBQUcsUUFBUSxDQUFDO1FBQ3ZCLElBQUksQ0FBQyxFQUFFLEdBQUcsS0FBSyxDQUFDLFFBQVEsQ0FBQyxNQUFNLENBQUMsRUFBRSxDQUFDO1FBQ25DLElBQUksQ0FBQyxPQUFPLEdBQUc7WUFDWCxVQUFVLEVBQUUsRUFBRTtZQUNkLFNBQVMsRUFBRSxFQUFFO1lBQ2IsS0FBSyxFQUFFLEVBQUU7U0FDWixDQUFDO1FBRUYsSUFBSSxDQUFDLFVBQVUsRUFBRSxDQUFDO0lBQ3RCLENBQUM7SUFFRCx5Q0FBVSxHQUFWO1FBQUEsaUJBaUJDO1FBaEJHLFFBQVEsQ0FBQyxLQUFLLENBQ1Y7UUFDQSxDQUFDLEVBQ0QsZUFBYSxJQUFJLENBQUMsRUFBSSxFQUN0QjtZQUNJLFdBQVcsRUFBRSxJQUFJO1lBQ2pCLE9BQU8sRUFBRTtnQkFDTCxJQUFJLEVBQUUsUUFBUSxDQUFDLGdCQUFnQixDQUFDLEtBQUs7Z0JBQ3JDLEtBQUssRUFBRSxZQUFZO2FBQ3RCO1NBQ0osQ0FDSixDQUFDLElBQUksQ0FBQyxVQUFBLE9BQU87WUFDVixFQUFFLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDO2dCQUNqQixLQUFJLENBQUMsT0FBTyxHQUFTLE1BQU8sQ0FBQyxNQUFNLENBQUMsRUFBQyxFQUFFLEVBQUUsT0FBTyxDQUFDLEdBQUcsRUFBQyxFQUFFLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQztZQUMxRSxDQUFDO1FBQ0wsQ0FBQyxDQUFDLENBQUM7SUFDUCxDQUFDO0lBRUQscUNBQU0sR0FBTjtRQUNJLElBQUksTUFBTSxHQUFHLEVBQUUsRUFDWCxNQUFNLEdBQUcsbUNBQW1DLENBQUM7UUFFakQsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLE9BQU8sQ0FBQyxVQUFVLENBQUMsT0FBTyxDQUFDLEtBQUssRUFBRSxFQUFFLENBQUMsQ0FBQyxNQUFNLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztZQUN6RCxNQUFNLENBQUMsSUFBSSxDQUFDLHdCQUF3QixDQUFDLENBQUM7UUFDMUMsQ0FBQztRQUVELEVBQUUsQ0FBQyxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsU0FBUyxDQUFDLE9BQU8sQ0FBQyxLQUFLLEVBQUUsRUFBRSxDQUFDLENBQUMsTUFBTSxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUM7WUFDeEQsTUFBTSxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1FBQ3pDLENBQUM7UUFFRCxFQUFFLENBQUMsQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLEVBQUUsQ0FBQyxDQUFDLE1BQU0sSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BELE1BQU0sQ0FBQyxJQUFJLENBQUMsbUJBQW1CLENBQUMsQ0FBQztRQUNyQyxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ25DLE1BQU0sQ0FBQyxJQUFJLENBQUMsMkJBQTJCLENBQUMsQ0FBQTtRQUM1QyxDQUFDO1FBRUQsRUFBRSxDQUFDLENBQUMsTUFBTSxDQUFDLE1BQU0sR0FBRyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ3BCLE1BQU0sQ0FBQyxPQUFPLENBQUMsS0FBSyxDQUFDO2dCQUNqQixLQUFLLEVBQUUsa0JBQWtCO2dCQUN6QixPQUFPLEVBQUUsc0RBQXNELEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUM7YUFDeEYsQ0FBQyxDQUFBO1FBQ04sQ0FBQztRQUVELElBQUksQ0FBQyxPQUFPLENBQUMsYUFBYSxDQUFDLElBQUksQ0FBQyxFQUFFLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ2xELENBQUMsSUFBSSxnQ0FBUSxDQUFDLENBQUMsTUFBTSxDQUFDLDBCQUEwQixDQUFDLENBQUM7UUFFbEQsTUFBTSxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBQztJQUN0QyxDQUFDO0lBdEVRLG9CQUFvQjtRQUxoQyxnQkFBUyxDQUFDO1lBQ1AsUUFBUSxFQUFFLFFBQVE7WUFDbEIsV0FBVyxFQUFFLDRCQUE0QjtTQUM1QyxDQUFDO3lDQVMyQiw0QkFBWSxFQUFTLHVCQUFjLEVBQVksa0NBQWUsRUFBWSxlQUFNO09BUGhHLG9CQUFvQixDQXVFaEM7SUFBRCwyQkFBQztDQUFBLEFBdkVELElBdUVDO0FBdkVZLG9EQUFvQiIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7Q29tcG9uZW50fSBmcm9tIFwiQGFuZ3VsYXIvY29yZVwiO1xuaW1wb3J0IHtBcHBDb21wb25lbnR9IGZyb20gXCIuLi9hcHAuY29tcG9uZW50XCI7XG5pbXBvcnQge0FjdGl2YXRlZFJvdXRlLCBSb3V0ZXJ9IGZyb20gXCJAYW5ndWxhci9yb3V0ZXJcIjtcbmNvbnN0IGZpcmViYXNlID0gcmVxdWlyZShcIm5hdGl2ZXNjcmlwdC1wbHVnaW4tZmlyZWJhc2VcIik7XG5pbXBvcnQgKiBhcyBkaWFsb2dzIGZyb20gXCJ1aS9kaWFsb2dzXCJcbmltcG9ydCB7Q29udGFjdHNTZXJ2aWNlfSBmcm9tIFwiLi9jb250YWN0cy5zZXJ2aWNlXCI7XG5pbXBvcnQge1NuYWNrQmFyfSBmcm9tIFwibmF0aXZlc2NyaXB0LXNuYWNrYmFyXCI7XG5cbkBDb21wb25lbnQoe1xuICAgIHNlbGVjdG9yOiAnbXktYXBwJyxcbiAgICB0ZW1wbGF0ZVVybDogJy4vcGFnZXMvY29udGFjdHMvZWRpdC5odG1sJ1xufSlcblxuZXhwb3J0IGNsYXNzIEVkaXRDb250YWN0Q29tcG9uZW50IHtcblxuICAgIHB1YmxpYyBjb250YWN0OiBhbnk7XG4gICAgaWQ6IFN0cmluZztcbiAgICBzZXJ2aWNlOiBDb250YWN0c1NlcnZpY2U7XG4gICAgcm91dGVyOiBSb3V0ZXI7XG5cbiAgICBjb25zdHJ1Y3Rvcihwcml2YXRlIGFwcDogQXBwQ29tcG9uZW50LCByb3V0ZTogQWN0aXZhdGVkUm91dGUsIGNTZXJ2aWNlOiBDb250YWN0c1NlcnZpY2UsIG5nUm91dGVyOiBSb3V0ZXIpIHtcbiAgICAgICAgdGhpcy5zZXJ2aWNlID0gY1NlcnZpY2U7XG4gICAgICAgIHRoaXMucm91dGVyID0gbmdSb3V0ZXI7XG4gICAgICAgIHRoaXMuaWQgPSByb3V0ZS5zbmFwc2hvdC5wYXJhbXMuaWQ7XG4gICAgICAgIHRoaXMuY29udGFjdCA9IHtcbiAgICAgICAgICAgIGZpcnN0X25hbWU6ICcnLFxuICAgICAgICAgICAgbGFzdF9uYW1lOiAnJyxcbiAgICAgICAgICAgIHBob25lOiAnJ1xuICAgICAgICB9O1xuXG4gICAgICAgIHRoaXMuZ2V0Q29udGFjdCgpO1xuICAgIH1cblxuICAgIGdldENvbnRhY3QoKSB7XG4gICAgICAgIGZpcmViYXNlLnF1ZXJ5KFxuICAgICAgICAgICAgKCkgPT4ge1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGAvY29udGFjdHMvJHt0aGlzLmlkfWAsXG4gICAgICAgICAgICB7XG4gICAgICAgICAgICAgICAgc2luZ2xlRXZlbnQ6IHRydWUsXG4gICAgICAgICAgICAgICAgb3JkZXJCeToge1xuICAgICAgICAgICAgICAgICAgICB0eXBlOiBmaXJlYmFzZS5RdWVyeU9yZGVyQnlUeXBlLlZBTFVFLFxuICAgICAgICAgICAgICAgICAgICB2YWx1ZTogJ2ZpcnN0X25hbWUnXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICApLnRoZW4ocmVzdWx0cyA9PiB7XG4gICAgICAgICAgICBpZiAoIXJlc3VsdHMuZXJyb3IpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmNvbnRhY3QgPSAoPGFueT5PYmplY3QpLmFzc2lnbih7aWQ6IHJlc3VsdHMua2V5fSwgcmVzdWx0cy52YWx1ZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIHVwZGF0ZSgpIHtcbiAgICAgICAgbGV0IGVycm9ycyA9IFtdLFxuICAgICAgICAgICAgcmVnZXhwID0gL15bXFxzKCkrLV0qKFswLTldW1xccygpKy1dKil7NiwyMH0kLztcblxuICAgICAgICBpZiAodGhpcy5jb250YWN0LmZpcnN0X25hbWUucmVwbGFjZSgvIC9naSwgXCJcIikubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKFwiRmlyc3QgTmFtZSBpcyByZXF1aXJlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNvbnRhY3QubGFzdF9uYW1lLnJlcGxhY2UoLyAvZ2ksIFwiXCIpLmxlbmd0aCA9PSAwKSB7XG4gICAgICAgICAgICBlcnJvcnMucHVzaChcIkxhc3QgTmFtZSBpcyByZXF1aXJlZFwiKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0aGlzLmNvbnRhY3QucGhvbmUucmVwbGFjZSgvIC9naSwgXCJcIikubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKFwiUGhvbmUgaXMgcmVxdWlyZWRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoIXJlZ2V4cC50ZXN0KHRoaXMuY29udGFjdC5waG9uZSkpIHtcbiAgICAgICAgICAgIGVycm9ycy5wdXNoKCdQaG9uZSBmb3JtYXQgaXMgbm90IHZhbGlkJylcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChlcnJvcnMubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIGRpYWxvZ3MuYWxlcnQoe1xuICAgICAgICAgICAgICAgIHRpdGxlOiAnVmFsaWRhdGlvbiBFcnJvcicsXG4gICAgICAgICAgICAgICAgbWVzc2FnZTogJ0ZhaWxlZCB0byB1cGRhdGUgY29udGFjdCBkdWUgdG8gbmV4dCBlcnJvcnM6XFxyXFxuXFxyXFxuJyArIGVycm9ycy5qb2luKCdcXHJcXG4nKVxuICAgICAgICAgICAgfSlcbiAgICAgICAgfVxuXG4gICAgICAgIHRoaXMuc2VydmljZS51cGRhdGVDb250YWN0KHRoaXMuaWQsIHRoaXMuY29udGFjdCk7XG4gICAgICAgIChuZXcgU25hY2tCYXIpLnNpbXBsZShcIkNvbnRhY3QgaGFzIGJlZW4gdXBkYXRlZFwiKTtcblxuICAgICAgICByZXR1cm4gdGhpcy5yb3V0ZXIubmF2aWdhdGUoWycnXSk7XG4gICAgfVxufSJdfQ==